import {
  HandleError,
  PrismaClientError,
} from '@/lib/utils/error-handling/types'
import { Prisma } from '@prisma/client'

/**
 * @function handlePrismaError
 * @description Handles errors generated by the Prisma Client during database operations.
 * The function distinguishes between known (`PrismaClientKnownRequestError`) and unknown/other Prisma error types
 * to provide either detailed or general information about the issue.
 *
 * @param  error - The Prisma Client error object. This can be any type of error
 * originating from Prisma (e.g., `PrismaClientKnownRequestError`, `PrismaClientUnknownRequestError`, etc.).
 * @returns  - A standardized error object containing `type` (always 'database'),
 * `message` (detailed or generic message), and `details` (Prisma error metadata or its message).
 */
export function handlePrismaError(error: PrismaClientError): HandleError {
  // Checks if the error is a known Prisma request error type (e.g., a unique constraint violation).
  // This `Prisma.PrismaClientKnownRequestError` type includes a `code` field and `meta`
  // with specific information about the database error.
  if (error instanceof Prisma.PrismaClientKnownRequestError) {
    return {
      type: 'database', // Error category: database
      message: `${error.message}. Code: ${error.code}.`, // Detailed message including the Prisma error code
      details: error.meta, // Prisma error metadata, containing additional context (e.g., the field causing the error).
    }
  } else {
    // Handles all other types of Prisma Client errors (e.g., unknown errors, initialization errors,
    // Rust panic errors, Prisma validation errors).
    // For these types, a more general error message is provided.
    return {
      type: 'database', // Error category: database
      message: 'Database error.', // Generic database error message
      details: error.message, // The original message from the Prisma error as details
    }
  }
}
